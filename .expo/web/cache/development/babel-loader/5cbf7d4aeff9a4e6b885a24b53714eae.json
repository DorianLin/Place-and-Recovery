{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Sliders from \"../components/Sliders\";\nimport React, { useEffect, useState } from \"react\";\nimport SampleQuestion from \"../sample_question.json\";\nimport { TextInput } from \"react-native-gesture-handler\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function QuizScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      questions = _useState2[0],\n      setQuestions = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      length = _useState4[0],\n      setLength = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      index = _useState6[0],\n      setIndex = _useState6[1];\n\n  var loadQuiz = function loadQuiz() {\n    setLength(SampleQuestion.length);\n    setIndex(0);\n    setQuestions(SampleQuestion);\n  };\n\n  var increase = function increase() {\n    if (index < length - 1) {\n      setIndex(index + 1);\n    }\n  };\n\n  var decrease = function decrease() {\n    if (index > 0) {\n      setIndex(index - 1);\n    }\n  };\n\n  useEffect(function () {\n    loadQuiz();\n  }, []);\n\n  var renderType0 = function renderType0(i) {\n    return questions[i][\"choices\"].map(function (option, idx) {\n      return _jsx(TouchableOpacity, {\n        style: styles.optionButton,\n        children: _jsx(Text, {\n          style: styles.buttonText,\n          children: option\n        })\n      }, idx);\n    });\n  };\n\n  var renderType1 = function renderType1(i) {\n    return _jsx(Sliders, {});\n  };\n\n  var renderType2 = function renderType2(i) {\n    var choices = renderType0(i);\n    return _jsxs(View, {\n      children: [renderType0(i), _jsx(TextInput, {\n        style: styles.input,\n        placeholder: \"other:\"\n      })]\n    });\n  };\n\n  var renderType3 = function renderType3(i) {\n    return questions[i][\"choices\"].map(function (option, idx) {\n      return _jsx(TouchableOpacity, {\n        style: styles.optionButton,\n        children: _jsx(Text, {\n          style: styles.buttonText,\n          children: option\n        })\n      }, idx);\n    });\n  };\n\n  var renderQuestionList = function renderQuestionList(i) {\n    var type = questions[i][\"type\"];\n\n    switch (type) {\n      case 0:\n        console.log(\"type 0\");\n        return renderType0(i);\n\n      case 1:\n        console.log(\"type 1\");\n        return renderType1(i);\n\n      case 2:\n        console.log(\"type 2\");\n        return renderType2(i);\n\n      case 3:\n        console.log(\"type 3\");\n        return renderType3(i);\n\n      default:\n        console.log(\"unable to parse type\");\n    }\n\n    return null;\n  };\n\n  return _jsx(View, {\n    style: styles.container,\n    children: questions && _jsxs(View, {\n      style: styles.parent,\n      children: [_jsx(View, {\n        style: styles.top,\n        children: _jsxs(Text, {\n          style: styles.question,\n          children: [\"Q\", index + 1, \". \", questions[index][\"question\"]]\n        })\n      }), _jsx(ScrollView, {\n        children: _jsx(View, {\n          children: renderQuestionList(index)\n        })\n      }), _jsxs(View, {\n        style: styles.bottom,\n        children: [_jsx(TouchableOpacity, {\n          style: styles.button,\n          onPress: decrease,\n          children: _jsx(Text, {\n            style: styles.buttonText,\n            children: \"PREVIOUS\"\n          })\n        }), _jsx(TouchableOpacity, {\n          style: styles.button,\n          onPress: increase,\n          children: _jsx(Text, {\n            style: styles.buttonText,\n            children: \"NEXT\"\n          })\n        }), _jsx(TouchableOpacity, {\n          style: styles.button,\n          onPress: function onPress() {\n            return navigation.navigate(\"Home\");\n          },\n          children: _jsx(Text, {\n            style: styles.buttonText,\n            children: \"END\"\n          })\n        })]\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    paddingTop: 20,\n    paddingHorizontal: 20,\n    flex: 1\n  },\n  top: {\n    marginVertical: 16\n  },\n  options: {\n    marginVertical: 16,\n    flex: 1\n  },\n  bottom: {\n    marginBottom: 5,\n    paddingVertical: 5,\n    justifyContent: \"space-between\",\n    flexDirection: \"row\"\n  },\n  button: {\n    backgroundColor: \"#184E77\",\n    padding: 12,\n    paddingHorizontal: 16,\n    borderRadius: 16,\n    alignItems: \"center\",\n    marginBottom: 30\n  },\n  buttonText: {\n    fontSize: 15,\n    color: \"white\"\n  },\n  question: {\n    fontSize: 20\n  },\n  option: {\n    fontSize: 18,\n    fontWeight: \"bold\",\n    color: \"white\"\n  },\n  optionButton: {\n    width: \"100%\",\n    height: 50,\n    paddingVertical: 8,\n    marginVertical: 8,\n    backgroundColor: \"#34A0A4\",\n    paddingHorizontal: 15,\n    borderRadius: 8,\n    justifyContent: \"center\"\n  },\n  parent: {\n    height: \"100%\"\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    borderWidth: 1,\n    padding: 10\n  }\n});","map":{"version":3,"sources":["/Users/dorian/RN_Projects/JD_Project/GT_1358_Project_Design/app/src/screens/QuizScreen.tsx"],"names":["Sliders","React","useEffect","useState","SampleQuestion","TextInput","QuizScreen","navigation","questions","setQuestions","length","setLength","index","setIndex","loadQuiz","increase","decrease","renderType0","i","map","option","idx","styles","optionButton","buttonText","renderType1","renderType2","choices","input","renderType3","renderQuestionList","type","console","log","container","parent","top","question","bottom","button","navigate","StyleSheet","create","paddingTop","paddingHorizontal","flex","marginVertical","options","marginBottom","paddingVertical","justifyContent","flexDirection","backgroundColor","padding","borderRadius","alignItems","fontSize","color","fontWeight","width","height","margin","borderWidth"],"mappings":";;;;;;AAOA,OAAOA,OAAP;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,cAAP;AAGA,SAASC,SAAT,QAA0B,8BAA1B;;;AAEA,eAAe,SAASC,UAAT,OAAoC;AAAA,MAAdC,UAAc,QAAdA,UAAc;;AACjD,kBAAkCJ,QAAQ,EAA1C;AAAA;AAAA,MAAOK,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAA4BN,QAAQ,CAAC,CAAD,CAApC;AAAA;AAAA,MAAOO,MAAP;AAAA,MAAeC,SAAf;;AACA,mBAA0BR,QAAQ,CAAC,CAAD,CAAlC;AAAA;AAAA,MAAOS,KAAP;AAAA,MAAcC,QAAd;;AAEA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrBH,IAAAA,SAAS,CAACP,cAAc,CAACM,MAAhB,CAAT;AACAG,IAAAA,QAAQ,CAAC,CAAD,CAAR;AACAJ,IAAAA,YAAY,CAACL,cAAD,CAAZ;AAED,GALD;;AAOA,MAAMW,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,QAAIH,KAAK,GAAGF,MAAM,GAAG,CAArB,EAAwB;AACtBG,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;AACF,GAJD;;AAKA,MAAMI,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,QAAIJ,KAAK,GAAG,CAAZ,EAAe;AACbC,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;AACF,GAJD;;AAMAV,EAAAA,SAAS,CAAC,YAAM;AACdY,IAAAA,QAAQ;AACT,GAFQ,EAEN,EAFM,CAAT;;AAIA,MAAMG,WAAW,GAAG,SAAdA,WAAc,CAACC,CAAD,EAAe;AACjC,WAAOV,SAAS,CAACU,CAAD,CAAT,CAAa,SAAb,EAAwBC,GAAxB,CAA4B,UAACC,MAAD,EAASC,GAAT;AAAA,aACjC,KAAC,gBAAD;AAA4B,QAAA,KAAK,EAAEC,MAAM,CAACC,YAA1C;AAAA,kBACE,KAAC,IAAD;AAAM,UAAA,KAAK,EAAED,MAAM,CAACE,UAApB;AAAA,oBAAiCJ;AAAjC;AADF,SAAuBC,GAAvB,CADiC;AAAA,KAA5B,CAAP;AAKD,GAND;;AAQA,MAAMI,WAAW,GAAG,SAAdA,WAAc,CAACP,CAAD,EAAe;AACjC,WAAO,KAAC,OAAD,KAAP;AACD,GAFD;;AAGA,MAAMQ,WAAW,GAAG,SAAdA,WAAc,CAACR,CAAD,EAAe;AACjC,QAAIS,OAAO,GAAGV,WAAW,CAACC,CAAD,CAAzB;AACA,WACE,MAAC,IAAD;AAAA,iBACGD,WAAW,CAACC,CAAD,CADd,EAEE,KAAC,SAAD;AAAW,QAAA,KAAK,EAAEI,MAAM,CAACM,KAAzB;AAAgC,QAAA,WAAW,EAAC;AAA5C,QAFF;AAAA,MADF;AAMD,GARD;;AASA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACX,CAAD,EAAe;AAEjC,WAAOV,SAAS,CAACU,CAAD,CAAT,CAAa,SAAb,EAAwBC,GAAxB,CAA4B,UAACC,MAAD,EAASC,GAAT;AAAA,aACjC,KAAC,gBAAD;AAA4B,QAAA,KAAK,EAAEC,MAAM,CAACC,YAA1C;AAAA,kBACE,KAAC,IAAD;AAAM,UAAA,KAAK,EAAED,MAAM,CAACE,UAApB;AAAA,oBAAiCJ;AAAjC;AADF,SAAuBC,GAAvB,CADiC;AAAA,KAA5B,CAAP;AAKD,GAPD;;AASA,MAAMS,kBAAkB,GAAG,SAArBA,kBAAqB,CAACZ,CAAD,EAAe;AACxC,QAAIa,IAAI,GAAGvB,SAAS,CAACU,CAAD,CAAT,CAAa,MAAb,CAAX;;AACA,YAAQa,IAAR;AACE,WAAK,CAAL;AACEC,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,eAAOhB,WAAW,CAACC,CAAD,CAAlB;;AACF,WAAK,CAAL;AACEc,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,eAAOR,WAAW,CAACP,CAAD,CAAlB;;AACF,WAAK,CAAL;AACEc,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,eAAOP,WAAW,CAACR,CAAD,CAAlB;;AACF,WAAK,CAAL;AACEc,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,eAAOJ,WAAW,CAACX,CAAD,CAAlB;;AACF;AACEc,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AAdJ;;AAiBA,WAAO,IAAP;AACD,GApBD;;AAsBA,SACE,KAAC,IAAD;AAAM,IAAA,KAAK,EAAEX,MAAM,CAACY,SAApB;AAAA,cAGG1B,SAAS,IACR,MAAC,IAAD;AAAM,MAAA,KAAK,EAAEc,MAAM,CAACa,MAApB;AAAA,iBACE,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEb,MAAM,CAACc,GAApB;AAAA,kBACE,MAAC,IAAD;AAAM,UAAA,KAAK,EAAEd,MAAM,CAACe,QAApB;AAAA,0BACIzB,KAAK,GAAG,CADZ,QACiBJ,SAAS,CAACI,KAAD,CAAT,CAAiB,UAAjB,CADjB;AAAA;AADF,QADF,EAOE,KAAC,UAAD;AAAA,kBACE,KAAC,IAAD;AAAA,oBAAOkB,kBAAkB,CAAClB,KAAD;AAAzB;AADF,QAPF,EAWE,MAAC,IAAD;AAAM,QAAA,KAAK,EAAEU,MAAM,CAACgB,MAApB;AAAA,mBACE,KAAC,gBAAD;AAAkB,UAAA,KAAK,EAAEhB,MAAM,CAACiB,MAAhC;AAAwC,UAAA,OAAO,EAAEvB,QAAjD;AAAA,oBACE,KAAC,IAAD;AAAM,YAAA,KAAK,EAAEM,MAAM,CAACE,UAApB;AAAA;AAAA;AADF,UADF,EAIE,KAAC,gBAAD;AAAkB,UAAA,KAAK,EAAEF,MAAM,CAACiB,MAAhC;AAAwC,UAAA,OAAO,EAAExB,QAAjD;AAAA,oBACE,KAAC,IAAD;AAAM,YAAA,KAAK,EAAEO,MAAM,CAACE,UAApB;AAAA;AAAA;AADF,UAJF,EAOE,KAAC,gBAAD;AACE,UAAA,KAAK,EAAEF,MAAM,CAACiB,MADhB;AAEE,UAAA,OAAO,EAAE;AAAA,mBAAMhC,UAAU,CAACiC,QAAX,CAAoB,MAApB,CAAN;AAAA,WAFX;AAAA,oBAIE,KAAC,IAAD;AAAM,YAAA,KAAK,EAAElB,MAAM,CAACE,UAApB;AAAA;AAAA;AAJF,UAPF;AAAA,QAXF;AAAA;AAJJ,IADF;AAkCD;AAED,IAAMF,MAAM,GAAGmB,UAAU,CAACC,MAAX,CAAkB;AAC/BR,EAAAA,SAAS,EAAE;AACTS,IAAAA,UAAU,EAAE,EADH;AAETC,IAAAA,iBAAiB,EAAE,EAFV;AAGTC,IAAAA,IAAI,EAAE;AAHG,GADoB;AAM/BT,EAAAA,GAAG,EAAE;AACHU,IAAAA,cAAc,EAAE;AADb,GAN0B;AAS/BC,EAAAA,OAAO,EAAE;AACPD,IAAAA,cAAc,EAAE,EADT;AAEPD,IAAAA,IAAI,EAAE;AAFC,GATsB;AAa/BP,EAAAA,MAAM,EAAE;AACNU,IAAAA,YAAY,EAAE,CADR;AAENC,IAAAA,eAAe,EAAE,CAFX;AAGNC,IAAAA,cAAc,EAAE,eAHV;AAINC,IAAAA,aAAa,EAAE;AAJT,GAbuB;AAmB/BZ,EAAAA,MAAM,EAAE;AACNa,IAAAA,eAAe,EAAE,SADX;AAENC,IAAAA,OAAO,EAAE,EAFH;AAGNT,IAAAA,iBAAiB,EAAE,EAHb;AAINU,IAAAA,YAAY,EAAE,EAJR;AAKNC,IAAAA,UAAU,EAAE,QALN;AAMNP,IAAAA,YAAY,EAAE;AANR,GAnBuB;AA2B/BxB,EAAAA,UAAU,EAAE;AACVgC,IAAAA,QAAQ,EAAE,EADA;AAEVC,IAAAA,KAAK,EAAE;AAFG,GA3BmB;AA+B/BpB,EAAAA,QAAQ,EAAE;AACRmB,IAAAA,QAAQ,EAAE;AADF,GA/BqB;AAkC/BpC,EAAAA,MAAM,EAAE;AACNoC,IAAAA,QAAQ,EAAE,EADJ;AAENE,IAAAA,UAAU,EAAE,MAFN;AAGND,IAAAA,KAAK,EAAE;AAHD,GAlCuB;AAuC/BlC,EAAAA,YAAY,EAAE;AACZoC,IAAAA,KAAK,EAAE,MADK;AAEZC,IAAAA,MAAM,EAAE,EAFI;AAGZX,IAAAA,eAAe,EAAE,CAHL;AAIZH,IAAAA,cAAc,EAAE,CAJJ;AAKZM,IAAAA,eAAe,EAAE,SALL;AAMZR,IAAAA,iBAAiB,EAAE,EANP;AAOZU,IAAAA,YAAY,EAAE,CAPF;AAQZJ,IAAAA,cAAc,EAAE;AARJ,GAvCiB;AAiD/Bf,EAAAA,MAAM,EAAE;AACNyB,IAAAA,MAAM,EAAE;AADF,GAjDuB;AAoD/BhC,EAAAA,KAAK,EAAE;AACLgC,IAAAA,MAAM,EAAE,EADH;AAELC,IAAAA,MAAM,EAAE,EAFH;AAGLC,IAAAA,WAAW,EAAE,CAHR;AAILT,IAAAA,OAAO,EAAE;AAJJ;AApDwB,CAAlB,CAAf","sourcesContent":["import {\n  TouchableOpacity,\n  StyleSheet,\n  Text,\n  View,\n  ScrollView,\n} from \"react-native\";\nimport Sliders from \"../components/Sliders\";\nimport React, { useEffect, useState } from \"react\";\nimport SampleQuestion from \"../sample_question.json\";\n\nimport { Slider, Icon } from \"react-native-elements\";\nimport { TextInput } from \"react-native-gesture-handler\";\n\nexport default function QuizScreen({ navigation }) {\n  const [questions, setQuestions] = useState();\n  const [length, setLength] = useState(0);\n  const [index, setIndex] = useState(0);\n\n  const loadQuiz = () => {\n    setLength(SampleQuestion.length);\n    setIndex(0);\n    setQuestions(SampleQuestion);\n    // console.log(arr);\n  };\n\n  const increase = () => {\n    if (index < length - 1) {\n      setIndex(index + 1);\n    }\n  };\n  const decrease = () => {\n    if (index > 0) {\n      setIndex(index - 1);\n    }\n  };\n\n  useEffect(() => {\n    loadQuiz();\n  }, []);\n\n  const renderType0 = (i: number) => {\n    return questions[i][\"choices\"].map((option, idx) => (\n      <TouchableOpacity key={idx} style={styles.optionButton}>\n        <Text style={styles.buttonText}>{option}</Text>\n      </TouchableOpacity>\n    ));\n  };\n\n  const renderType1 = (i: number) => {\n    return <Sliders />;\n  };\n  const renderType2 = (i: number) => {\n    let choices = renderType0(i);\n    return (\n      <View>\n        {renderType0(i)}\n        <TextInput style={styles.input} placeholder=\"other:\" />\n      </View>\n    );\n  };\n  const renderType3 = (i: number) => {\n    // TODO: replace the code from type0. Need to includes checkboxes\n    return questions[i][\"choices\"].map((option, idx) => (\n      <TouchableOpacity key={idx} style={styles.optionButton}>\n        <Text style={styles.buttonText}>{option}</Text>\n      </TouchableOpacity>\n    ));\n  };\n\n  const renderQuestionList = (i: number) => {\n    let type = questions[i][\"type\"];\n    switch (type) {\n      case 0:\n        console.log(\"type 0\"); // multiple choice with single answer\n        return renderType0(i);\n      case 1:\n        console.log(\"type 1\"); // scale question, from 1-5, continuous value, sliders\n        return renderType1(i);\n      case 2:\n        console.log(\"type 2\"); // multiple choice with single answer that has additional free text box as last option\n        return renderType2(i);\n      case 3:\n        console.log(\"type 3\"); // multiple choices\n        return renderType3(i);\n      default:\n        console.log(\"unable to parse type\");\n    }\n\n    return null;\n  };\n\n  return (\n    <View style={styles.container}>\n      {/* If \"question\" is not null, execute this part of code */}\n      {/* Those are buttons and questions */}\n      {questions && (\n        <View style={styles.parent}>\n          <View style={styles.top}>\n            <Text style={styles.question}>\n              Q{index + 1}. {questions[index][\"question\"]}\n            </Text>\n          </View>\n\n          <ScrollView>\n            <View>{renderQuestionList(index)}</View>\n          </ScrollView>\n\n          <View style={styles.bottom}>\n            <TouchableOpacity style={styles.button} onPress={decrease}>\n              <Text style={styles.buttonText}>PREVIOUS</Text>\n            </TouchableOpacity>\n            <TouchableOpacity style={styles.button} onPress={increase}>\n              <Text style={styles.buttonText}>NEXT</Text>\n            </TouchableOpacity>\n            <TouchableOpacity\n              style={styles.button}\n              onPress={() => navigation.navigate(\"Home\")}\n            >\n              <Text style={styles.buttonText}>END</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingTop: 20,\n    paddingHorizontal: 20,\n    flex: 1,\n  },\n  top: {\n    marginVertical: 16,\n  },\n  options: {\n    marginVertical: 16,\n    flex: 1,\n  },\n  bottom: {\n    marginBottom: 5,\n    paddingVertical: 5,\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n  },\n  button: {\n    backgroundColor: \"#184E77\",\n    padding: 12,\n    paddingHorizontal: 16,\n    borderRadius: 16,\n    alignItems: \"center\",\n    marginBottom: 30,\n  },\n  buttonText: {\n    fontSize: 15,\n    color: \"white\",\n  },\n  question: {\n    fontSize: 20,\n  },\n  option: {\n    fontSize: 18,\n    fontWeight: \"bold\",\n    color: \"white\",\n  },\n  optionButton: {\n    width: \"100%\",\n    height: 50,\n    paddingVertical: 8,\n    marginVertical: 8,\n    backgroundColor: \"#34A0A4\",\n    paddingHorizontal: 15,\n    borderRadius: 8,\n    justifyContent: \"center\",\n  },\n  parent: {\n    height: \"100%\",\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    borderWidth: 1,\n    padding: 10,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}