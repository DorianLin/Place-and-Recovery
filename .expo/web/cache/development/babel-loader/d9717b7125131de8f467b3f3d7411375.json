{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport useCachedResources from \"./hooks/useCachedResources\";\nimport useColorScheme from \"./hooks/useColorScheme\";\nimport Navigation from \"./navigation/index\";\nimport RegistrationScreen from \"./screens/RegistrationScreen\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport OpeningScreen from \"./screens/OpeningScreen\";\nimport Login from \"./screens/LoginScreen\";\nimport Verification from \"./screens/Verification\";\nimport EmailVerificationScreen from \"./screens/EmailVerificationScreen\";\nimport Loading from \"./screens/Loading\";\nimport React from \"react\";\nimport { AuthContext } from \"./navigation/context\";\nimport * as SecureStore from \"expo-secure-store\";\nimport axios from \"axios\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar AuthStack = createNativeStackNavigator();\n\nvar AuthenticationStackNavigator = function AuthenticationStackNavigator() {\n  return _jsxs(AuthStack.Navigator, {\n    children: [_jsx(AuthStack.Screen, {\n      name: \"Login\",\n      component: Login,\n      options: {\n        headerShown: false,\n        title: \"Log in\"\n      }\n    }), _jsx(AuthStack.Screen, {\n      name: \"Registration\",\n      component: RegistrationScreen,\n      options: {\n        title: \"Sign Up\"\n      }\n    }), _jsx(AuthStack.Screen, {\n      name: \"Opening\",\n      component: OpeningScreen\n    }), _jsx(AuthStack.Screen, {\n      name: \"VerificationScreen\",\n      component: Verification,\n      options: {\n        headerShown: true,\n        title: \"Verification\"\n      }\n    }), _jsx(AuthStack.Screen, {\n      name: \"EmailVerificationScreen\",\n      component: EmailVerificationScreen,\n      options: {\n        headerShown: true,\n        title: \"Verification\"\n      }\n    })]\n  });\n};\n\nexport default function App() {\n  var isLoadingComplete = useCachedResources();\n  var colorScheme = useColorScheme();\n  var AuthStack = createNativeStackNavigator();\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoading = _React$useState2[0],\n      setIsLoading = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      authValid = _React$useState4[0],\n      setAuthValid = _React$useState4[1];\n\n  var setItem = function setItem(name, data) {\n    try {\n      SecureStore.setItemAsync(name, data);\n    } catch (error) {\n      console.log(\"AsyncStorage save error: \" + error.message);\n    }\n  };\n\n  var verifyToken = function verifyToken() {\n    SecureStore.getItemAsync(\"user_token\").then(function (token) {\n      axios.get(\"http://localhost:2400/api/auth/jwt-test\", {\n        headers: {\n          Authorization: token\n        }\n      }).then(function (response) {\n        setItem(\"first_name\", response.data[\"firstName\"]);\n        setItem(\"last_name\", response.data[\"lastName\"]);\n        setItem(\"email\", response.data[\"email\"]);\n        setAuthValid(true);\n      }).catch(function (error) {\n        console.log(\"Your are not logged in!\");\n        setAuthValid(false);\n      });\n    });\n  };\n\n  var authContext = React.useMemo(function () {\n    return {\n      signIn: function signIn(token) {\n        setIsLoading(false);\n        setItem(\"user_token\", token);\n        verifyToken();\n      },\n      signUp: function signUp(token) {\n        setIsLoading(false);\n        setItem(\"user_token\", token);\n        verifyToken();\n      },\n      signOut: function signOut() {\n        setIsLoading(false);\n        setAuthValid(false);\n        setItem(\"user_token\", \"\");\n      }\n    };\n  }, []);\n  React.useEffect(function () {\n    setTimeout(function () {\n      setIsLoading(false);\n    }, 1500);\n  }, []);\n  React.useEffect(function () {\n    verifyToken();\n  }, []);\n\n  if (isLoading) {\n    return _jsx(Loading, {});\n  }\n\n  return _jsx(AuthContext.Provider, {\n    value: authContext,\n    children: _jsx(NavigationContainer, {\n      children: authValid ? _jsx(Navigation, {}) : _jsx(AuthenticationStackNavigator, {})\n    })\n  });\n}","map":{"version":3,"sources":["/Users/dorian/RN_Projects/JD_Project/GT_1358_Project_Design/app/src/App.tsx"],"names":["useCachedResources","useColorScheme","Navigation","RegistrationScreen","NavigationContainer","createNativeStackNavigator","OpeningScreen","Login","Verification","EmailVerificationScreen","Loading","React","AuthContext","SecureStore","axios","AuthStack","AuthenticationStackNavigator","headerShown","title","App","isLoadingComplete","colorScheme","useState","isLoading","setIsLoading","authValid","setAuthValid","setItem","name","data","setItemAsync","error","console","log","message","verifyToken","getItemAsync","then","token","get","headers","Authorization","response","catch","authContext","useMemo","signIn","signUp","signOut","useEffect","setTimeout"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\n\nimport LoginScreen from \"./screens/LoginScreen\";\nimport Navigation from './navigation/index';\n// import AuthenticationStackNavigator from \"./navigation/index\";\n\nimport RegistrationScreen from \"./screens/RegistrationScreen\";\nimport { NavigationContainer, TabActions } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport HomeScreen from \"./screens/HomeScreen\";\nimport LocationScreen from \"./screens/LocationScreen\";\nimport OpeningScreen from \"./screens/OpeningScreen\";\nimport Login from \"./screens/LoginScreen\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport Verification from \"./screens/Verification\";\nimport EmailVerificationScreen from \"./screens/EmailVerificationScreen\";\nimport Loading from \"./screens/Loading\";\nimport React, { useState } from \"react\";\nimport { AuthContext } from \"./navigation/context\";\n\nimport * as SecureStore from \"expo-secure-store\";\nimport axios from \"axios\";\n\nconst AuthStack = createNativeStackNavigator();\n\nconst AuthenticationStackNavigator = () => {\n  return (\n    <AuthStack.Navigator>\n      <AuthStack.Screen\n        name=\"Login\"\n        component={Login}\n        options={{ headerShown: false, title: \"Log in\" }}\n      />\n      <AuthStack.Screen\n        name=\"Registration\"\n        component={RegistrationScreen}\n        options={{ title: \"Sign Up\" }}\n      />\n\n      <AuthStack.Screen name=\"Opening\" component={OpeningScreen} />\n      <AuthStack.Screen\n        name=\"VerificationScreen\"\n        component={Verification}\n        options={{ headerShown: true, title: \"Verification\" }}\n      />\n      <AuthStack.Screen\n        name=\"EmailVerificationScreen\"\n        component={EmailVerificationScreen}\n        options={{ headerShown: true, title: \"Verification\" }}\n      />\n\n    </AuthStack.Navigator>\n\n  );\n};\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n  const AuthStack = createNativeStackNavigator();\n\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [authValid, setAuthValid] = React.useState(false);\n\n  const setItem = (name: string, data: string) => {\n    try {\n      SecureStore.setItemAsync(name, data);\n      // console.log(\"data stored\");\n    } catch (error) {\n      // Error saving data\n      console.log(\"AsyncStorage save error: \" + error.message);\n    }\n  };\n\n  const verifyToken = () => {\n    SecureStore.getItemAsync(\"user_token\").then((token) => {\n      // console.log(token);\n      axios\n        .get(\"http://localhost:2400/api/auth/jwt-test\", {\n          headers: {\n            Authorization: token,\n          },\n        })\n        .then((response) => {\n          // console.log(response.data);\n          /* Sample Response \n          \"__v\": 0,\n          \"_id\": \"620ec8cac557a52657871051\",\n          \"email\": \"jqlin@gatech.edu\",\n          \"firstName\": \"Dorian\",\n          \"lastName\": \"Lin\",\n          \"password\": \"$2b$10$5QwRckvi3J5eCb/gdnIFte7DYi8HCQ4TfNMXdz5Rz7xR/fOiVjn5G\",\n          \"phoneNumber\": \"123456789\",\n          \"resetTries\": 0,\n          */\n          // TOFIX: probably this should be done somewhere else; maybe in signUp ?\n          setItem(\"first_name\", response.data[\"firstName\"]);\n          setItem(\"last_name\", response.data[\"lastName\"]);\n          setItem(\"email\", response.data[\"email\"]);\n\n          setAuthValid(true);\n        })\n        .catch((error) => {\n          console.log(\"Your are not logged in!\"); // token error\n          setAuthValid(false);\n        });\n    });\n  };\n\n  const authContext = React.useMemo(() => {\n    return {\n      signIn: (token: string) => {\n        setIsLoading(false);\n        setItem(\"user_token\", token);\n        verifyToken();\n      },\n      signUp: (token: string) => {\n        setIsLoading(false);\n        setItem(\"user_token\", token);\n        verifyToken();\n      },\n      signOut: () => {\n        setIsLoading(false);\n        setAuthValid(false);\n        setItem(\"user_token\", \"\");\n      },\n    };\n  }, []);\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 1500);\n  }, []);\n\n  React.useEffect(() => {\n    verifyToken();\n  }, []);\n\n  if (isLoading) {\n    return <Loading />;\n  }\n\n  return (\n    <AuthContext.Provider value={authContext}>\n      <NavigationContainer>\n        {authValid ? <Navigation /> : <AuthenticationStackNavigator />}\n      </NavigationContainer>\n    </AuthContext.Provider>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}